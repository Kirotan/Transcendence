services:
  nginx:
    build:
      context: .
      dockerfile: ./Backend/nginx/Dockerfile
      args:
        USER_ID: ${USER_ID}
        GROUP_ID: ${GROUP_ID}
    ports:
      - "8000:8000"
      - "8080:8080"
    volumes:
      - ./Frontend:/usr/share/nginx/html
    depends_on:
      - spa
      - pong
    env_file:
      - .env
    networks:
      - pong-network
      - ping-network
      - spa-network
      - prom-network
    container_name: nginx

# Dev

  spa:
    build:
      context: .
      dockerfile: ./Backend/spa/Dockerfile
      args:
        USER_ID: ${USER_ID}
        GROUP_ID: ${GROUP_ID}
    volumes:
      - ./Backend/spa:/usr/src/app/Backend
      - ./Frontend/css:/usr/src/app/Frontend/css
      - ./Frontend/templates:/usr/src/app/Frontend/templates
      - ./Frontend/ts:/usr/src/app/Frontend/ts
      - ./Frontend/assets:/usr/src/app/Frontend/assets
    networks:
      - spa-network
      - ping-network
      - pong-network
    depends_on:
      - pong
    container_name: spa
    env_file:
      - .env
    expose:
      - "7000"

# # Prod
  # spa:
  #   build:
  #     context: .
  #     dockerfile: ./Backend/spa/Dockerfile
  #     args:
  #       USER_ID: ${USER_ID}
  #       GROUP_ID: ${GROUP_ID}
  #   volumes:
  #     - ./Backend/spa:/usr/src/app/Backend
  #     - spa-vol:/usr/src/app/Frontend/avatar
  #   networks:
  #     - spa-network
  #     - ping-network
  #     - pong-network
  #   depends_on:
  #     - pong
  #   container_name: spa
  #   env_file:
  #     - .env
  #   expose:
  #     - "7000"

  pong:
    build:
      context: .
      dockerfile: ./Backend/pong/Dockerfile
      args:
        USER_ID: ${USER_ID}
        GROUP_ID: ${GROUP_ID}
    volumes:
      - ./Backend/pong:/usr/src/app/Backend
    networks:
      - spa-network
      - pong-network
    container_name: pong
    env_file:
      - .env
    restart: "no"
    expose:
      - "4000"

  ping:
    build:
      context: .
      dockerfile: ./Backend/ping/Dockerfile
      args:
        USER_ID: ${USER_ID}
        GROUP_ID: ${GROUP_ID}
    volumes:
      - ./Backend/ping:/usr/src/app/Backend
    networks:
      - spa-network
      - ping-network
    container_name: ping
    env_file:
      - .env
    restart: "no"
    expose:
      - "4002"

  solo_ping:
    build:
      context: .
      dockerfile: ./Backend/solo_ping/Dockerfile
      args:
        USER_ID: ${USER_ID}
        GROUP_ID: ${GROUP_ID}
    volumes:
      - ./Backend/solo_ping:/usr/src/app/Backend
    networks:
      - spa-network
      - ping-network
    container_name: solo_ping
    env_file:
      - .env
    restart: "no"
    expose:
      - "4003"

  users:
    build:
      context: .
      dockerfile: ./Backend/Users/Dockerfile
      args:
        USER_ID: ${USER_ID}
        GROUP_ID: ${GROUP_ID}
    volumes:
      - ./Backend/Users/js:/usr/src/app/Backend/js
      - sqlite_data:/usr/src/app/dataBase
    networks:
      - spa-network
    container_name: users
    env_file:
      - .env
    expose:
      - "5000"

  matchmaking:
    build:
      context: .
      dockerfile: ./Backend/Matchmaking/Dockerfile
      args:
        USER_ID: ${USER_ID}
        GROUP_ID: ${GROUP_ID}
    volumes:
      - ./Backend/Matchmaking:/usr/src/app/Backend
    networks:
      - spa-network
      - ping-network
      - pong-network
    container_name: matchmaking
    env_file:
      - .env
    restart: "no"
    expose:
      - "4020"

  # prometheus:
  #   container_name: prometheus
  #   image: prom/prometheus:latest
  #   volumes:
  #     - ./Backend/monitoring/Prometheus/conf/prometheus.yml:/etc/prometheus/prometheus.yml
  #     - ./Backend/monitoring/Prometheus/conf/web-config.yml:/etc/prometheus/web-config.yml
  #     - ./Backend/monitoring/Prometheus/certs/prometheus.crt:/etc/prometheus/certs/prometheus.crt
  #     - ./Backend/monitoring/Prometheus/certs/prometheus.key:/etc/prometheus/certs/prometheus.key
  #     - ./certs/ca/ca.crt:/etc/prometheus/certs/ca.crt:ro
  #     - prom-data:/prometheus
  #   command:
  #     - "--config.file=/etc/prometheus/prometheus.yml"
  #     - "--web.config.file=/etc/prometheus/web-config.yml"
  #     - "--web.listen-address=:9090"
  #     - "--storage.tsdb.retention.time=30d"
  #     - "--storage.tsdb.path=/prometheus"
  #   ports:
  #     - "9090:9090"
  #   depends_on:
  #     - nginx-exporter
  #   networks:
  #     - prom-network
  #   env_file:
  #     - .env
  #   restart: unless-stopped


  # grafana:
  #   container_name: grafana
  #   image: grafana/grafana:latest
  #   logging:
  #     driver: "none"
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - grafana:/var/lib/grafana
  #   environment:
  #     - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
  #     - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
  #     - GF_SERVER_PROTOCOL=${GF_SERVER_PROTOCOL}
  #   depends_on:
  #     - prometheus
  #   networks:
  #     - prom-network

  # nginx-exporter:
  #   image: nginx/nginx-prometheus-exporter:latest
  #   container_name: nginx-exporter
  #   depends_on:
  #     - nginx
  #   expose:
  #     - "9113"
  #   networks:
  #     - prom-network
  #   volumes:
  #     - ./certs/ca/ca.crt:/etc/ssl/certs/ca.crt:ro
  #   command:
  #     - "--nginx.scrape-uri=https://nginx:8000/nginx_status"
  #     - "--nginx.ssl-ca-cert=/etc/ssl/certs/ca.crt"
  #     - "--nginx.ssl-verify"

  # exporter-proxy:
  #   # service dédié pour terminer le TLS
  #   image: nginx:stable
  #   container_name: exporter-proxy
  #   depends_on:
  #     - nginx-exporter
  #   volumes:
  #     - ./Backend/monitoring/proxy/nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./Backend/monitoring/nginx-exporter/certs/exporter.crt:/etc/nginx-exporter/certs/exporter.crt:ro
  #     - ./Backend/monitoring/nginx-exporter/certs/exporter.key:/etc/nginx-exporter/certs/exporter.key:ro
  #   ports:
  #     - "9113:9113"
  #   restart: unless-stopped
  #   networks:
  #     - prom-network

networks:
  spa-network:
    driver: bridge
  pong-network:
    driver: bridge
  ping-network:
    driver: bridge
  prom-network:
    driver: bridge

volumes:
  sqlite_data:
  grafana:
  prom-data:
  spa-vol:
